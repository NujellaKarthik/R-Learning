###
#
# Classification demo using Forensic Glass (fgl from MASS)
#
###
# Data Codebook
#
#     RI     refractive index (more precisely RI is 1.581xxxx)
#     Na     sodium (% by weight of oxides)
#     Mg     manganese (% by wt)
#     Al     aluminium (% by wt)
#     Si     silicon (% by wt)
#     K      potassium (% by wt)
#     Ca     calcium (% by wt)
#     Ba     barium (% by wt)
#     Fe     iron (% by wt)
#     type   WinF (window float glass: 70),
#            WinNF (window non-float glass: 76),
#            Veh (vehicle window glass: 17),
#            Con (containers:13),
#            Tabl (tableware: 9),
#            Head (vehicle headlamps: 29)
###
#     History:  20180206  Initial code and debug (wj)
#
###
library(tidyverse)
library(data.table)
library(partykit)
# constants and flags
myDebug <- FALSE

# change this to whatever you need on your system
setwd("E:/UTD_masters/Spring-2018-2nd-SEM/BUAN_6357.002-Advanced_BA_Using_R/class_topics/Classification")

MASSfgl <- fread("MASS_fgl.txt")

str(MASSfgl)

table(MASSfgl$type)

set.seed(1)

# choose an random start point for a 20% sample (1 of 5)
step      <- sample(1:5,1,replace=F)
# identify the testing sample (index values)
test      <- seq(from=step, to=length(MASSfgl$type), by=5)
# check debug listing options
if (myDebug) { test }

# CV samples: train and test
testFgl   <- MASSfgl[ test, ]
trainFgl  <- MASSfgl[-test, ]

table(testFgl$type)
table(trainFgl$type)

# hold the type values for later use
hold_type <- trainFgl$type

#
# Classification
####
# each v. other using glm(), rpart(), and ctree()
#
# setup indicator var for each value of type
#
# type: Con
#
trainFgl$type <- ifelse(hold_type == "Con", 1, 0)
logitCon      <- glm(type~., 
                     data=trainFgl, 
                     family=binomial() )
pLogitCon     <- predict(logitCon, testFgl, type="response")
ctCon         <- ctree(type~., data=trainFgl)
pCtCon        <- predict(ctCon, testFgl)
rpCon         <- rpart(type~.,
                       data=trainFgl,
                       method="anova")
pRpCon        <- predict(rpCon,testFgl)

# type: Head
trainFgl$type <- ifelse(hold_type == "Head", 1, 0)
logitHead     <- glm(type~., 
                     data=trainFgl, 
                     family=binomial() )
pLogitHead    <- predict(logitHead, testFgl, type="response")
ctHead        <- ctree(type~., data=trainFgl)
str(lclass)pCtHead       <- predict(ctHead, testFgl)
rpHead        <- rpart(type~.,
                       data=trainFgl,
                       method="anova")
pRpHead       <- predict(rpHead,testFgl)

# type: Tabl
trainFgl$type <- ifelse(hold_type == "Tabl", 1, 0)
logitTabl     <- glm(type~., 
                     data=trainFgl, 
                     family=binomial() )
pLogitTabl    <- predict(logitTabl, testFgl, type="response")
ctTabl        <- ctree(type~., data=trainFgl)
pCtTabl       <- predict(ctTabl, testFgl)
rpTabl        <- rpart(type~.,
                       data=trainFgl,
                       method="anova")
pRpTabl       <- predict(rpTabl,testFgl)

# type: Veh
trainFgl$type <- ifelse(hold_type == "Veh", 1, 0)
logitVeh      <- glm(type~., 
                     data=trainFgl, 
                     family=binomial() )
pLogitVeh     <- predict(logitVeh, testFgl, type="response")
ctVeh         <- ctree(type~., data=trainFgl)
pCtVeh        <- predict(ctVeh, testFgl)
rpVeh         <- rpart(type~.,
                       data=trainFgl,
                       method="anova")
pRpVeh        <- predict(rpVeh,testFgl)

# type: WinF
trainFgl$type <- ifelse(hold_type == "WinF", 1, 0)
logitWinF     <- glm(type~., 
                     data=trainFgl, 
                     family=binomial() )
pLogitWinF    <- predict(logitWinF, testFgl, type="response")
ctWinF        <- ctree(type~., data=trainFgl)
pCtWinF       <- predict(ctWinF, testFgl)
rpWinF        <- rpart(type~.,
                       data=trainFgl,
                       method="anova")
pRpWinF       <- predict(rpWinF,testFgl)

# type: WinNF 
trainFgl$type <- ifelse(hold_type == "WinNF", 1, 0)
logitWinNF    <- glm(type~., 
                     data=trainFgl, 
                     family=binomial() )
pLogitWinNF   <- predict(logitWinNF, testFgl, type="response")
ctWinNF       <- ctree(type~., data=trainFgl)
pCtWinNF      <- predict(ctWinNF, testFgl)
rpWinNF       <- rpart(type~.,
                       data=trainFgl,
                       method="anova")
pRpWinNF      <- predict(rpWinNF,testFgl)

# create matrix for each v. other classification
lProbs        <- cbind(pLogitCon,  pLogitHead, pLogitTabl, pLogitVeh,
                       pLogitWinF, pLogitWinNF)
lClass        <- apply(lProbs, 1, which.max)
ctProbs       <- cbind(pCtCon, pCtHead, pCtTabl, pCtVeh, pCtWinF, pCtWinNF)
ctClass       <- apply(ctProbs, 1, which.max)
rpProbs       <- cbind(pRpCon, pRpHead, pRpTabl, pRpVeh, pRpWinF, pRpWinNF)
rpClass       <- apply(rpProbs, 1, which.max)

# create confusion matricies (a.k.a. hit tables) [ctree() gave table w/o level 4 ]
ctClass2      <- factor(ctClass, level=1:6)
lHit          <- table(lClass,   testFgl$type)
ctHit         <- table(ctClass2, testFgl$type)
rpHit         <- table(rpClass,  testFgl$type)

###
# multinomial approach
###
trainFgl$type <- as.factor(hold_type)

mRp           <- rpart(type~., 
                       data=trainFgl, 
                       method="class")
# generates a matrix (not recognized initially)
pRp           <- predict(mRp, testFgl)
cpRp          <- apply(pRp, 1, which.max)

mCt           <- ctree(type~.,
                       data=trainFgl)
pCt           <- predict(mCt, testFgl)

# confusion matricies (multinomial) [ rpart() gave table w/o level 3 ]
cpRp2         <- factor(cpRp, level=1:6)
mRpHit        <- table(cpRp2, testFgl$type)
mCtHit        <- table(pCt, testFgl$type)

# show hit tables

# logit (each v. other)
lHit
# ctree (each v. other)
ctHit
# rpart (each v. other)
rpHit
# rpart (multinomial)
mRpHit
# ctree (multinomial)
mCtHit

# percent correctly classified

pcRight       <- function (m) {
  return (sum(diag(m))/sum(m) )
}
# logit (each v. other)
pcRight(lHit)
# ctree (each v. other)
pcRight(ctHit)
# rpart (each v. other)
pcRight(rpHit)
# rpart (multinomial)
pcRight(mRpHit)
# ctree (multiomial)
pcRight(mCtHit)

